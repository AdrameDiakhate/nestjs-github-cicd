name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: v22.13.0
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Test and collect coverage
        run: npm run test:cov
      - name: Check coverage
        run: |
              COVERAGE=$(cat coverage/coverage-final.json | jq .total.lines.pct)
              echo "Coverage: $COVERAGE%"
              if (( $(echo "$COVERAGE < 80" | bc -l) )); then
                echo "Coverage is below 80%. Aborting deployment."
                exit 1
              fi
      - name: Run E2E tests
        run: npm run test:e2e
        

  # sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: setup

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Java
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'

      # - name: SonarQube Scan
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     npm install sonar-scanner --save-dev
      #     npx sonar-scanner \
      #       -Dsonar.projectKey=your-project-key \
      #       -Dsonar.organization=your-organization \
      #       -Dsonar.host.url=https://sonarcloud.io \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}





  # build:
  #   runs-on: ubuntu-latest
  #   needs: tests

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build application
  #       run: npm run build

  #     - name: Archive build
  #       run: zip -r app.zip dist/

  #     - name: Upload build artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: app
  #         path: app.zip

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: app

  #     - name: Deploy to VPS
  #       env:
  #         VPS_HOST: ${{ secrets.VPS_HOST }}
  #         VPS_USER: ${{ secrets.VPS_USER }}
  #         VPS_KEY: ${{ secrets.VPS_KEY }}
  #       run: |
  #         scp -i $VPS_KEY app.zip $VPS_USER@$VPS_HOST:/tmp/app.zip
  #         ssh -i $VPS_KEY $VPS_USER@$VPS_HOST "unzip -o /tmp/app.zip -d /var/www/app && pm2 restart app"
